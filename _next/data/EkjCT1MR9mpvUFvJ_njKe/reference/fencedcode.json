{"pageProps":{"source":{"compiledSource":"var c=Object.defineProperty,s=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var d=(t,a,n)=>a in t?c(t,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[a]=n,e=(t,a)=>{for(var n in a||(a={}))r.call(a,n)&&d(t,n,a[n]);if(o)for(var n of o(a))l.call(a,n)&&d(t,n,a[n]);return t},p=(t,a)=>s(t,h(a));var m=(t,a)=>{var n={};for(var i in t)r.call(t,i)&&a.indexOf(i)<0&&(n[i]=t[i]);if(t!=null&&o)for(var i of o(t))a.indexOf(i)<0&&l.call(t,i)&&(n[i]=t[i]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var i=n,{components:t}=i,a=m(i,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),a),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Oftentimes, you need to display a code example on the page. This example could be as simple as a one-liner or as complex as a diff view. Below are the ways you can use fenced code blocks with NextBook.\"),mdx(\"h2\",e({},{id:\"simple-fenced-block\"}),\"Simple Fenced Block\"),mdx(\"p\",null,\"Wrap your code using triple \",\"`\",\"`` characters for the simplest code formatting.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"```\\nEverything within fenced code will\\nbe displayed in monospace font.\\n```\\n\")),mdx(\"p\",null,\"results in:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`Everything within fenced code will\nbe displayed in monospace font.\n`)),mdx(\"h2\",e({},{id:\"syntax-highlighting\"}),\"Syntax Highlighting\"),mdx(\"h3\",e({},{id:\"theme-aware-highlighting\"}),\"Theme-Aware Highlighting\"),mdx(\"p\",null,\"You can add syntax highlighting by specifying code's \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://prismjs.com/index.html#supported-languages\",target:\"_blank\",rel:\"nofollow noopener noreferrer\"}),\"language\"),\" after triple ```. NextBook uses \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/PrismJS\",target:\"_blank\",rel:\"nofollow noopener noreferrer\"}),\"PrismJS\"),\" for themes and language definitions as it is currently the most complete one. \"),mdx(\"p\",null,\"When application's theme changes, so does the fenced code theme. Try it now by pressing \",mdx(\"kbd\",null,\"T\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`\\`\\`\\`jsx\nimport React, { useState } from 'react'\n\nfunction Square(props) {\n  const [value, setValue] = useState(null)\n\n  return (\n    <button className=\"square\" onClick={() => alert('click')}>\n      {props.value}\n    </button>\n  )\n}\n\\`\\`\\`\n`)),mdx(\"p\",null,\"results in:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`import React, { useState } from 'react'\n\nfunction Square(props) {\n  const [value, setValue] = useState(null)\n\n  return (\n    <button className=\"square\" onClick={() => alert('click')}>\n      {props.value}\n    </button>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"forced-dark-theme\"}),\"Forced Dark Theme\"),mdx(\"p\",null,\"You can force dark syntax highlighting even on light theme. Provide \",mdx(\"inlineCode\",{parentName:\"p\"},\"dark\"),\" parameter to do that. Swith to light theme by pressing \",mdx(\"kbd\",null,\"T\"),\". to see code block below still using dark theme.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`\\`\\`\\`jsx dark\nimport React, { useState } from 'react'\n\nfunction Square(props) {\n  const [value, setValue] = useState(null)\n\n  return (\n    <button className=\"square\" onClick={() => alert('click')}>\n      {props.value}\n    </button>\n  )\n}\n\\`\\`\\`\n`)),mdx(\"p\",null,\"results in:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"dark\",dark:!0}),`import React, { useState } from 'react'\n\nfunction Square(props) {\n  const [value, setValue] = useState(null)\n\n  return (\n    <button className=\"square\" onClick={() => alert('click')}>\n      {props.value}\n    </button>\n  )\n}\n`)),mdx(\"h2\",e({},{id:\"clipboard-button\"}),\"Clipboard Button\"),mdx(\"p\",null,\"Any code block will have automatic \",mdx(\"inlineCode\",{parentName:\"p\"},\"Copy\"),\" icon clicking which copies contents of code block to clipboard.\"),mdx(\"h2\",e({},{id:\"code-header-information\"}),\"Code Header Information\"),mdx(\"p\",null,\"You can display various information like title and link to source in code header. \"),mdx(\"h3\",e({},{id:\"code-title\"}),\"Code Title\"),mdx(\"p\",null,\"Often you need to tell which file you are talking about. You can specify this by adding \",mdx(\"inlineCode\",{parentName:\"p\"},\"title\"),\" info:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`\\`\\`\\`jsx title=app.jsx\nimport React, { useState } from 'react'\n\nfunction Square(props) {\n  const [value, setValue] = useState(null)\n\n  return (\n    <button className=\"square\" onClick={() => alert('click')}>\n      {props.value}\n    </button>\n  )\n}\n\\`\\`\\`\n`)),mdx(\"p\",null,\"results in:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"title=app.jsx\",title:\"app.jsx\"}),`import React, { useState } from 'react'\n\nfunction Square(props) {\n  const [value, setValue] = useState(null)\n\n  return (\n    <button className=\"square\" onClick={() => alert('click')}>\n      {props.value}\n    </button>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"linked-code-title\"}),\"Linked Code Title\"),mdx(\"p\",null,\"In case you need to link to original source you can pass \",mdx(\"inlineCode\",{parentName:\"p\"},\"link\"),\" metadata. Now, title will be a link to the specified URL.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`\\`\\`\\`python title=Colors/primary_colors.py link=https://github.com/geekcomputers/Python/blob/master/Colors/primary_colors.py\ndef diff(a, b):\n    \"\"\"\n    TODO: fix this function!!\n    \"\"\"\n    return a - b\n\\`\\`\\`\n`)),mdx(\"p\",null,\"results in:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\",metastring:\"title=Colors/primary_colors.py link=https://github.com/geekcomputers/Python/blob/master/Colors/primary_colors.py\",title:\"Colors/primary_colors.py\",link:\"https://github.com/geekcomputers/Python/blob/master/Colors/primary_colors.py\"}),`def diff(a, b):\n    \"\"\"\n    TODO: fix this function!!\n    \"\"\"\n    return a - b\n`)),mdx(\"h2\",e({},{id:\"line-numbering\"}),\"Line Numbering\"),mdx(\"h3\",e({},{id:\"automatic-numbering\"}),\"Automatic Numbering\"),mdx(\"p\",null,\"Lines of code can have automatic numbering. Provide \",mdx(\"inlineCode\",{parentName:\"p\"},\"numbered\"),\" metadata to achive that:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`\\`\\`\\`html numbered\n<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta http-equiv='X-UA-Compatible' content='IE=edge'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Document</title>\n</head>\n<body>\n    <h1>Hello World!</h1>\n</body>\n</html>\n\\`\\`\\`\n`)),mdx(\"p\",null,\"results in:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-html\",metastring:\"numbered\",numbered:!0}),`<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta http-equiv='X-UA-Compatible' content='IE=edge'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Document</title>\n</head>\n<body>\n    <h1>Hello World!</h1>\n</body>\n</html>\n`)),mdx(\"h3\",e({},{id:\"numbering-with-manual-offset\"}),\"Numbering With Manual Offset\"),mdx(\"p\",null,\"Code can start from any provided number. Use \",mdx(\"inlineCode\",{parentName:\"p\"},\"numbered\"),\" together with \",mdx(\"inlineCode\",{parentName:\"p\"},\"startline\"),\" metadata to achive that. Default startline is \",mdx(\"inlineCode\",{parentName:\"p\"},\"1\"),\" unless provided.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`\\`\\`\\`html numbered startline=3\n<head>\n    <meta charset='UTF-8'>\n    <meta http-equiv='X-UA-Compatible' content='IE=edge'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Document</title>\n</head>\n\\`\\`\\`\n`)),mdx(\"p\",null,\"results in:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-html\",metastring:\"numbered startline=3\",numbered:!0,startline:\"3\"}),`<head>\n    <meta charset='UTF-8'>\n    <meta http-equiv='X-UA-Compatible' content='IE=edge'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Document</title>\n</head>\n`)),mdx(\"h2\",e({},{id:\"line-marking\"}),\"Line Marking\"),mdx(\"p\",null,\"In some cases there's a need to highlight/mark some lines and then describe each line seperately. Any number of lines can be marked by providing \",mdx(\"inlineCode\",{parentName:\"p\"},\"marked\"),\" parameter:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`\\`\\`\\`html marked=2,5,6,10\n<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta http-equiv='X-UA-Compatible' content='IE=edge'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Document</title>\n</head>\n<body>\n    <h1>Hello World!</h1>\n</body>\n</html>\n\\`\\`\\`\n`)),mdx(\"p\",null,\"results in:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-html\",metastring:\"marked=2,5,6,10\",marked:\"2,5,6,10\"}),`<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta http-equiv='X-UA-Compatible' content='IE=edge'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Document</title>\n</head>\n<body>\n    <h1>Hello World!</h1>\n</body>\n</html>\n`)),mdx(\"h2\",e({},{id:\"line-diffing\"}),\"Line Diffing\"),mdx(\"p\",null,\"Sometimes you want to show which lines were added or removed from code. This can be achieved by passing related line numbers as \",mdx(\"inlineCode\",{parentName:\"p\"},\"added\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"removed\"),\" parameters. Added lines will be highlighted with light green, removed lines with light red color. Note that displaying numbers, although works, in this case would cause a confusion as line numbers do not repeat.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`\\`\\`\\`html removed=2,8 added=3,9,10\n<!DOCTYPE html>\n<html lang='en'>\n<html lang='ja'>\n<head>\n...\n</head>\n<body>\n    <h1>Hello World!</h1>\n    <h1>\\u3053\\u3093\\u306B\\u3061\\u306F\\u4E16\\u754C!</h1>\n    <p>\\u4ECA\\u65E5\\u306F\\u5929\\u6C17\\u304C\\u3044\\u3044\\u3067\\u3059\\u306D\\u3002</p>\n</body>\n</html>\n\\`\\`\\`\n`)),mdx(\"p\",null,\"results in:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-html\",metastring:\"removed=2,8 added=3,9,10\",removed:\"2,8\",added:\"3,9,10\"}),`<!DOCTYPE html>\n<html lang='en'>\n<html lang='ja'>\n<head>\n...\n</head>\n<body>\n    <h1>Hello World!</h1>\n    <h1>\\u3053\\u3093\\u306B\\u3061\\u306F\\u4E16\\u754C!</h1>\n    <p>\\u4ECA\\u65E5\\u306F\\u5929\\u6C17\\u304C\\u3044\\u3044\\u3067\\u3059\\u306D\\u3002</p>\n</body>\n</html>\n`)),mdx(\"p\",null,\"You can also pass every other parameter mentioned above together. Here we are adding some of them:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`\\`\\`\\`html numbered marked=2,5,6,10 title=public/index.html link=https://gist.github.com/amiroff/04d57ef025845b191d9cd30c7ca13f20 \n<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta http-equiv='X-UA-Compatible' content='IE=edge'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Document</title>\n</head>\n<body>\n    <h1>Hello World!</h1>\n</body>\n</html>\n\\`\\`\\`\n`)),mdx(\"p\",null,\"results in \"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-html\",metastring:\"numbered marked=2,5,6,10 title=public/index.html link=https://gist.github.com/amiroff/04d57ef025845b191d9cd30c7ca13f20\",numbered:!0,marked:\"2,5,6,10\",title:\"public/index.html\",link:\"https://gist.github.com/amiroff/04d57ef025845b191d9cd30c7ca13f20\"}),`<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta http-equiv='X-UA-Compatible' content='IE=edge'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Document</title>\n</head>\n<body>\n    <h1>Hello World!</h1>\n</body>\n</html>\n`)),mdx(\"h2\",e({},{id:\"escaping-code-blocks\"}),\"Escaping Code Blocks\"),mdx(\"p\",null,\"To escape (prevent from displaying as highlighted code) block and simply display how fenced code is being used in source, wrap it with \",mdx(\"inlineCode\",{parentName:\"p\"},\"~~~\"),\":\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`~~~\n\\`\\`\\`html\n<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta http-equiv='X-UA-Compatible' content='IE=edge'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>\n\\`\\`\\`\n~~~\n`)),mdx(\"p\",null,\"will result in:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`\\`\\`\\`html\n<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta http-equiv='X-UA-Compatible' content='IE=edge'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>\n\\`\\`\\`\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"part":"Documentation","title":"Fenced Code Block Usage","tocRaw":[{"content":"Simple Fenced Block","slug":"simple-fenced-block","lvl":2,"i":0,"seen":0},{"content":"Syntax Highlighting","slug":"syntax-highlighting","lvl":2,"i":1,"seen":0},{"content":"Theme-Aware Highlighting","slug":"theme-aware-highlighting","lvl":3,"i":2,"seen":0},{"content":"Forced Dark Theme","slug":"forced-dark-theme","lvl":3,"i":3,"seen":0},{"content":"Clipboard Button","slug":"clipboard-button","lvl":2,"i":4,"seen":0},{"content":"Code Header Information","slug":"code-header-information","lvl":2,"i":5,"seen":0},{"content":"Code Title","slug":"code-title","lvl":3,"i":6,"seen":0},{"content":"Linked Code Title","slug":"linked-code-title","lvl":3,"i":7,"seen":0},{"content":"Line Numbering","slug":"line-numbering","lvl":2,"i":8,"seen":0},{"content":"Automatic Numbering","slug":"automatic-numbering","lvl":3,"i":9,"seen":0},{"content":"Numbering With Manual Offset","slug":"numbering-with-manual-offset","lvl":3,"i":10,"seen":0},{"content":"Line Marking","slug":"line-marking","lvl":2,"i":11,"seen":0},{"content":"Line Diffing","slug":"line-diffing","lvl":2,"i":12,"seen":0},{"content":"Escaping Code Blocks","slug":"escaping-code-blocks","lvl":2,"i":13,"seen":0}]}},"frontMatter":{"part":"Documentation","title":"Fenced Code Block Usage","tocRaw":[{"content":"Simple Fenced Block","slug":"simple-fenced-block","lvl":2,"i":0,"seen":0},{"content":"Syntax Highlighting","slug":"syntax-highlighting","lvl":2,"i":1,"seen":0},{"content":"Theme-Aware Highlighting","slug":"theme-aware-highlighting","lvl":3,"i":2,"seen":0},{"content":"Forced Dark Theme","slug":"forced-dark-theme","lvl":3,"i":3,"seen":0},{"content":"Clipboard Button","slug":"clipboard-button","lvl":2,"i":4,"seen":0},{"content":"Code Header Information","slug":"code-header-information","lvl":2,"i":5,"seen":0},{"content":"Code Title","slug":"code-title","lvl":3,"i":6,"seen":0},{"content":"Linked Code Title","slug":"linked-code-title","lvl":3,"i":7,"seen":0},{"content":"Line Numbering","slug":"line-numbering","lvl":2,"i":8,"seen":0},{"content":"Automatic Numbering","slug":"automatic-numbering","lvl":3,"i":9,"seen":0},{"content":"Numbering With Manual Offset","slug":"numbering-with-manual-offset","lvl":3,"i":10,"seen":0},{"content":"Line Marking","slug":"line-marking","lvl":2,"i":11,"seen":0},{"content":"Line Diffing","slug":"line-diffing","lvl":2,"i":12,"seen":0},{"content":"Escaping Code Blocks","slug":"escaping-code-blocks","lvl":2,"i":13,"seen":0}]}},"__N_SSG":true}